<template>
    <section id="More-artwork-box">
      <div class="popup-content">
        <div class="More-artwork-box">
          <div class="row">
            <div class="col-sm-5">
              <div class="form-group">
                <div
                  class="drag-drop-container text-center d-flex align-items-center"
                >
                  <span v-if="!artworkImg">
                    <h6>Add Artwork</h6>
                    <span class="cz-upload-text text-secondary mb-2"
                      >Drag or Browse file to upload</span
                    >
                    <VueFileAgent
                      @upload="onUpload($event)"
                      @upload:error="onUploadError($event)"
                      ref="vueFileAgent"
                      :uploadUrl="this.uploadUrl"
                      :uploadHeaders="this.uploadHeaders"
                      :theme="'grid'"
                      :multiple="false"
                      :deletable="true"
                      :meta="true"
                      :sortable="'hold'"
                      :accept="'image/*'"
                      :maxSize="'10.5MB'"
                      :helpText="'Add Media Drag or Browse file to upload'"
                      :errorText="{
                        type: 'Invalid file type. Only images or zip Allowed',
                        size: 'Files should not exceed 10MB in size',
                      }"
                      @select="filesSelected($event)"
                      @beforedelete="onBeforeDelete($event)"
                      @delete="fileDeleted($event)"
                      v-model="fileRecords"
                    ></VueFileAgent>
                  </span>
                  <span v-if="artworkImg">
                    <img :src="artworkImg" alt="" />
                  </span>
                </div>
                <!-- drag-drop-container -->
              </div>
            </div>
            <div class="col-sm-7">
              <div class="form-group text-left">
                <label>Reference or title</label>
                <input
                  type="text"
                  class="form-control"
                  placeholder="Enter Title"
                  v-model="title"
                />
              </div>
              <div class="form-group text-left">
                <label>Artwork Note</label>
                <textarea
                  class="form-control"
                  placeholder="Add Artwork Note Here..."
                  v-model="artworkNote"
                ></textarea>
              </div>
            </div>
            <div class="col-sm-5">
              <div class="form-group text-left">
                <label>Colours</label>
                <select class="form-control" @change="handleColorBrushesCount">
                  <option disabled value="">Please select Colour</option>
                  <option
                    v-for="(color, index) in colorBrushes"
                    :value="color.id"
                    :key="index"
                  >
                    {{ color.count }}
                  </option>
                </select>
              </div>
            </div>
            <!-- PMS Color -->
            <div class="col-sm-7">
              <div class="form-group text-left">
                <label>Enter the PMS Colour Code</label>
                <div class="color-select-section" style="position: relative">
                  <p style="display: none">{{ updateColor }}</p>
                  <div
                    v-for="(arrCount, arrIndex) in getColor()"
                    :key="arrIndex"
                    class="color-boxin"
                  >
                    <input
                      type="text"
                      class="form-control w-80px"
                      v-model="pmsColors[arrIndex]"
                    />
                  </div>
                </div>
              </div>
            </div>
  
            <div class="col-sm-5"></div>
            <!-- Hex Color -->
            <div class="col-sm-7">
              <div class="form-group text-left">
                <label>Select Hex Color</label>
                <div class="color-select-section" style="position: relative">
                  <p style="display: none">{{ updateColor }}</p>
                  <div
                    v-for="(arrCount, arrIndex) in getColor()"
                    :key="arrIndex"
                    class="color-boxin w-80px"
                  >
                    <i
                      class="fas fa-paint-brush"
                      @click="handleBrushColor(arrIndex)"
                      ><ColorPicker @colorValue="getBrushColorSelected"
                    /></i>
                    <p>
                      <span
                        class="color-box"
                        :style="{ backgroundColor: arrCount.color }"
                      ></span>
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="popup-btn-block">
          <div style="float: right">
            <button
              type="button"
              v-if="saveAddNewArtworkBtn"
              class="btn btn-dark mr-3"
              @click="handleMoreArtwork"
              style="float: left"
            >
              <i class="fa fa-plus mr-2"></i>SAVE & NEW ARTWORK
            </button>
            <button
              type="button"
              v-if="newArtworkBtn"
              class="btn btn-dark mr-3"
              @click="handleAddNewArtwork"
              style="float: left"
            >
              <i class="fa fa-plus mr-2"></i>SAVE & NEW ARTWORK
            </button>
            <template v-if="Object.keys(editArtwork).length == 0">
              <button
                class="green-btn btn"
                @click="handleArtworkSubmit"
                :disabled="isButtonDisabled"
              >
                Save Artwork
              </button>
            </template>
  
            <template v-else>
              <button class="green-btn btn" @click="handleArtworkSubmit">
                Update
              </button>
            </template>
  
            <!-- <button class="btn btn-dark">
               Reset
            </button> -->
          </div>
        </div>
  
        <div class="loaderMoreProduct text-center" v-if="loaderMoreProduct">
          <apiResponseLoader :width="60" />
        </div>
      </div>
    </section>
  </template>
  
  <script>
  import { artWorkBrushColorCount } from "@/components/utils/constants";
  import ColorPicker from "@/components/suppliers/products/colorPicker";
  import apiResponseLoader from "@/components/suppliers/products/apiResponseLoader.vue";
  import toast from "@/services/toast";
  
  export default {
    name: "productArtWorkUpload",
  
    data() {
      return {
        isButtonDisabled: false,
        saveAddNewArtworkBtn: true,
        newArtworkBtn: false,
        btnDisabled: true,
        loaderMoreProduct: false,
        resetFlag: 0,
        colorBrushes: [],
        colorSelectedCount: 1,
        brushColorSelected: "",
        updateColor: "",
        colorData: [
          {
            color: "",
            index: 0,
          },
        ],
        arrIndex: 0,
        title: "",
        artworkNote: "",
        mediaType: 1,
        imageFileName: [],
        size: "",
        fileName: null,
        fileRecords: [],
        uploadUrl: `${process.env.VUE_APP_API_BASE_URL}api/ProductFile/FileUploadToPhysicalLocationList`,
        uploadHeaders: {
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
        fileRecordsForUpload: [], // maintain an upload queue
        isEditMode: false,
        brushCount: "",
        artworkImg: "",
        flag: 0,
        pmsColors: [],
        combineAllColors: "",
      };
    },
    components: { ColorPicker, apiResponseLoader },
    props: {
      orderProductVaraintDetails: {
        type: Object,
        required: true,
      },
      productId: {
        type: Number,
        required: false,
      },
      selectedBrandingLocationId: {
        type: Number,
        required: true,
      },
      orderProductDetail: {
        type: Object,
        required: true,
      },
      editArtwork: {
        type: Object,
        required: true,
      },
      brandingDetailWithArtwork: {
        type: Object,
        required: true,
      },
      specificArtworkId: {
        type: Number,
        required: false,
      },
    },
    created() {
      this.colorBrushes = artWorkBrushColorCount;
    },
    watch: {
      editArtwork() {
        this.colorData = [];
        if (this.editArtwork.artWorkDataDto) {
          this.title = this.editArtwork.artWorkDataDto.refrenceOrTitle;
          this.artworkNote = this.editArtwork.artWorkDataDto.notes;
          this.artworkImg = this.editArtwork.artWorkDataDto.url.url;
          this.colorBrushes.map((item) => {
            if (item.id == this.editArtwork.artWorkDataDto.hexColors.length) {
              this.brushCount = item.count;
              this.hexColors = this.editArtwork.artWorkDataDto.hexColors;
              return this.brushCount;
            }
          });
          this.colorSelectedCount =
            this.editArtwork.artWorkDataDto.hexColors.length;
          this.handleColorSelectDropdown(this.colorSelectedCount);
        }
      },
      artworkImg(NewVal, OldVal) {
        this.fileRecords = NewVal;
        this.fileRecordsForUpload = NewVal;
      },
    },
    methods: {
      // on changing up the colors count
      handleColorBrushesCount(e) {
        this.brushColorSelected = "";
        this.colorData = [];
        this.colorSelectedCount = parseInt(e.target.value);
        this.handleColorSelectDropdown(this.colorSelectedCount);
      },
      handleColorSelectDropdown(colorSelectedCount) {
        for (let i = 0; i < colorSelectedCount; i++) {
          this.colorData.push({
            color: "",
            index: i,
          });
        }
      },
  
      // on hex brush click
      handleBrushColor(arrIndex) {
        this.flag = 1;
        this.arrIndex = arrIndex;
      },
  
      // on color select set color and index in an array for further direct use
      getBrushColorSelected(colorValue) {
        this.brushColorSelected = "";
        this.brushColorSelected = colorValue;
        if (this.colorData.length > 0) {
          this.colorData[this.arrIndex] = {
            color: this.brushColorSelected,
            index: this.arrIndex,
          };
        } else {
          this.colorData.push({
            color: this.brushColorSelected,
            index: 0,
          });
        }
        this.updateColor = this.brushColorSelected;
      },
  
      // artwork Hex colors associated with brushes
      getColor() {
        return this.colorData;
      },
  
      // artwork form reset
      handleResetButton() {
        this.resetFlag = 1;
        this.colorData = [
          {
            color: "",
            index: 0,
          },
        ];
        this.colorBrushes = [
          {
            id: 1,
            count: "Only 1 Color",
          },
        ];
      },
  
      // Add More Artwork
      handleMoreArtwork() {
        this.handleArtworkSubmit();
        this.isButtonDisabled = false;
        const element = document.getElementById("More-artwork-box");
        element.scrollIntoView();
        toast.info("Please Add New Artwork.");
        this.btnDisabled = false;
        //Form Empty code
        this.title = "";
        this.artworkNote = "";
        // this.pmsColors = "";
        // this.combineAllColors = "";
      },
  
      handleAddNewArtwork() {
        this.isButtonDisabled = false;
        this.saveAddNewArtworkBtn = true;
        this.newArtworkBtn = false;
        const element = document.getElementById("More-artwork-box");
        element.scrollIntoView();
        toast.info("Please Add New Artwork.");
        this.btnDisabled = false;
        //Form Empty code
        this.title = "";
        this.artworkNote = "";
        // this.pmsColors = "";
        // this.combineAllColors = "";
      },
  
      // artwork form submission
      handleArtworkSubmit() {
        this.isButtonDisabled = true;
        this.newArtworkBtn = !this.newArtworkBtn;
        this.saveAddNewArtworkBtn = !this.saveAddNewArtworkBtn;
        const colors = this.getColor();
        const allColors = [];
        colors.map((item) => {
          allColors.push(item.color);
        });
        this.combineAllColors = allColors.toString();
        let artworkData = {};
        if (Object.keys(this.editArtwork).length === 0) {
          artworkData = {
            id: 0,
            refrenceOrTitle: this.title,
            notes: this.artworkNote,
            pmsColors: this.pmsColors,
            hexColors: this.combineAllColors,
            numberOfColorsInDesign: allColors.length,
            productId: this.productId,
            orderNumber: localStorage.getItem("order_number"),
            brandingLocationId: this.selectedBrandingLocationId,
            BrandingMethod: this.brandingDetailWithArtwork.brandingMethod,
            BrandingLocation: this.brandingDetailWithArtwork.brandingLocation,
            BrandingArea: `${this.brandingDetailWithArtwork.brandingLocationWidth}, ${this.brandingDetailWithArtwork.brandingLocationLength}`,
            BrandingSource: this.brandingDetailWithArtwork.brandingSourceName,
            DecoratorId: this.brandingDetailWithArtwork.decorator,
            EstimatedCompletionDate:
              this.brandingDetailWithArtwork.estimatedCompletionDate,
            BrandingNotes: this.brandingDetailWithArtwork.brandingNote,
            artworkImage: {
              fileName: this.imageFileName.fileName,
              name: this.imageFileName.fileName,
              type: this.imageFileName.type,
              size: this.size,
              ext: this.imageFileName.ext,
              metaType: this.mediaType,
            },
          };
        } else {
          artworkData = {
            id: this.specificArtworkId,
            refrenceOrTitle: this.title,
            notes: this.artworkNote,
            pmsColors: this.pmsColors,
            hexColors: this.combineAllColors,
            numberOfColorsInDesign: allColors.length,
            productId: this.productId,
            orderNumber: localStorage.getItem("order_number"),
            artworkImage: {
              fileName: this.imageFileName.fileName,
              name: this.imageFileName.fileName,
              type: this.imageFileName.type,
              size: this.size,
              ext: this.imageFileName.ext,
              metaType: this.mediaType,
            },
          };
        }
  
        this.$store.dispatch("handleSubmitArtwork", artworkData).then((res) => {
          this.loaderMoreProduct = true;
          this.$emit("artworkId", res.data.result);
          this.$store
            .dispatch("getArtworkForProduct", {
              productId: this.productId,
              OrderNumber: localStorage.getItem("order_number"),
            })
            .then((res) => {
              this.$emit("artworkData", res.data.result);
              this.loaderMoreProduct = false;
              //Form Empty code
              this.title = "";
              this.artworkNote = "";
              // this.pmsColors = "";
              // this.combineAllColors = "";
            });
          const element = document.getElementById("More-artwork-box");
          element.scrollIntoView();
  
          const formDataArtwork = {
            OrderNumber: localStorage.getItem("order_number"),
          };
          this.$store.dispatch("getArtworkListForLinking", formDataArtwork);
        });
      },
  
      // image -
      uploadFiles: function () {
        this.$refs.vueFileAgent.upload(
          this.uploadUrl,
          this.uploadHeaders,
          this.fileRecordsForUpload
        );
        this.fileRecordsForUpload = [];
      },
      deleteUploadedFile: function (fileRecord) {
        this.$refs.vueFileAgent.deleteUpload(
          this.uploadUrl,
          this.uploadHeaders,
          fileRecord
        );
      },
      filesSelected: function (fileRecordsNewlySelected) {
        var validFileRecords = fileRecordsNewlySelected.filter(
          (fileRecord) => !fileRecord.error
        );
        this.fileRecordsForUpload =
          this.fileRecordsForUpload.concat(validFileRecords);
      },
      onBeforeDelete: function (fileRecord) {
        const fileID = this.getImageIdForRemove(fileRecord);
        this.$store.dispatch("deleteLogoAction", { id: fileID });
        var i = this.fileRecordsForUpload.indexOf(fileRecord);
        if (i !== -1) {
          // queued file, not yet uploaded. Just remove from the arrays
          this.fileRecordsForUpload.splice(i, 1);
          var k = this.fileRecords.indexOf(fileRecord);
          if (k !== -1) this.fileRecords.splice(k, 1);
        } else {
          if (confirm("Are you sure you want to delete?")) {
            this.$refs.vueFileAgent.deleteFileRecord(fileRecord); // will trigger 'delete' event
          }
        }
      },
      fileDeleted: function (fileRecord) {
        var i = this.fileRecordsForUpload.indexOf(fileRecord);
        if (i !== -1) {
          this.fileRecordsForUpload.splice(i, 1);
        } else {
          this.deleteUploadedFile(fileRecord);
        }
      },
      getImageIdForRemove(data) {
        var record = {};
        if (data.fileName != undefined) {
          record = data.id;
          return record;
        } else {
          record = data.upload.data.result[0].id;
          return record;
        }
      },
      onUpload(responses) {
        if (responses[0].data.success) {
          this.fileName = this.fileRecordsForUpload;
          this.imageFileName = responses[0].data.result[0];
          this.size = this.fileRecordsForUpload[0].size;
        }
      },
      onUploadError(failedResponses) {
        // handle error
      },
    },
  };
  </script>
  